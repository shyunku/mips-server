import { User } from '@/user/user.entity';
import { generateNumCode } from '@/utils/common.util';
import { Injectable, OnModuleInit } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { LessThan, Repository } from 'typeorm';

@Injectable()
export class UserService implements OnModuleInit {
  constructor(
    @InjectRepository(User) private readonly userRepository: Repository<User>,
  ) {}

  async onModuleInit(): Promise<void> {
    await this.removeExpiredAutoGeneratedUsers();
  }

  @Cron(CronExpression.EVERY_HOUR)
  async removeExpiredAutoGeneratedUsers(): Promise<void> {
    // delete auto generated users created before -24 hours
    const createdAtThreshold = new Date();
    createdAtThreshold.setHours(createdAtThreshold.getHours() - 24);

    const result = await this.userRepository.delete({
      autoGenerated: true,
      createdAt: LessThan(createdAtThreshold),
    });

    console.log(`removed expired auto generated ${result.affected} users`);
  }

  async getUser(uid: number): Promise<User> {
    return await this.userRepository.findOne({ where: { uid } });
  }

  async removeAutoGeneratedUser(uid: number): Promise<void> {
    await this.userRepository.delete({ uid, autoGenerated: true });
  }

  async createAutoGeneratedUser(): Promise<User> {
    const user = new User();
    // TODO :: create with name generator
    const code = generateNumCode(4);
    user.nickname = `유저${code}`;
    user.autoGenerated = true;
    return await this.userRepository.save(user);
  }
}
