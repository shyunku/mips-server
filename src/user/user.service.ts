import { User } from '@/user/user.entity';
import { generateNumCode } from '@/utils/common.util';
import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { LessThan, Repository } from 'typeorm';
import { UserSignupDto } from './user.dto';

@Injectable()
export class UserService implements OnModuleInit {
  private logger: Logger = new Logger('UserService');

  constructor(
    @InjectRepository(User) private readonly userRepository: Repository<User>,
  ) {}

  async onModuleInit(): Promise<void> {
    await this.removeExpiredAutoGeneratedUsers();
  }

  @Cron(CronExpression.EVERY_HOUR)
  async removeExpiredAutoGeneratedUsers(): Promise<void> {
    // delete auto generated users created before -24 hours
    const createdAtThreshold = new Date();
    createdAtThreshold.setHours(createdAtThreshold.getHours() - 24);

    const result = await this.userRepository.delete({
      autoGenerated: true,
      createdAt: LessThan(createdAtThreshold),
    });

    this.logger.log(`removed expired auto generated ${result.affected} users`);
  }

  async createUser(signupDto: UserSignupDto): Promise<User> {
    const code = generateNumCode(4);

    const user = new User();
    user.id = signupDto.id;
    user.encryptedPassword = signupDto.encryptedPassword;
    user.nickname = signupDto.nickname ?? `유저${code}`;
    user.autoGenerated = false;
    return await this.userRepository.save(user);
  }

  async validateUser(id: string, encryptedPassword: string): Promise<User> {
    return await this.userRepository.findOne({
      where: { id, encryptedPassword },
    });
  }

  async getUser(uid: number): Promise<User> {
    return await this.userRepository.findOne({ where: { uid } });
  }

  async removeAutoGeneratedUser(uid: number): Promise<void> {
    await this.userRepository.delete({ uid, autoGenerated: true });
  }

  async createAutoGeneratedUser(nickname: string | null): Promise<User> {
    const user = new User();
    // TODO :: create with name generator
    const code = generateNumCode(4);
    user.nickname = nickname ?? `유저${code}`;
    user.autoGenerated = true;
    return await this.userRepository.save(user);
  }
}
